

@misc{pawlik_rted_2011,
	title = {{RTED}: A Robust Algorithm for the Tree Edit Distance},
	url = {http://arxiv.org/abs/1201.0230},
	doi = {10.48550/arXiv.1201.0230},
	shorttitle = {{RTED}},
	abstract = {We consider the classical tree edit distance between ordered labeled trees, which is defined as the minimum-cost sequence of node edit operations that transform one tree into another. The state-of-the-art solutions for the tree edit distance are not satisfactory. The main competitors in the field either have optimal worst-case complexity, but the worst case happens frequently, or they are very efficient for some tree shapes, but degenerate for others. This leads to unpredictable and often infeasible runtimes. There is no obvious way to choose between the algorithms. In this paper we present {RTED}, a robust tree edit distance algorithm. The asymptotic complexity of {RTED} is smaller or equal to the complexity of the best competitors for any input instance, i.e., {RTED} is both efficient and worst-case optimal. We introduce the class of {LRH} (Left-Right-Heavy) algorithms, which includes {RTED} and the fastest tree edit distance algorithms presented in literature. We prove that {RTED} outperforms all previously proposed {LRH} algorithms in terms of runtime complexity. In our experiments on synthetic and real world data we empirically evaluate our solution and compare it to the state-of-the-art.},
	number = {{arXiv}:1201.0230},
	publisher = {{arXiv}},
	author = {Pawlik, Mateusz and Augsten, Nikolaus},
	urldate = {2024-02-14},
	date = {2011-12-31},
	eprinttype = {arxiv},
	eprint = {1201.0230 [cs]},
	keywords = {Computer Science - Databases},
	file = {arXiv.org Snapshot:/Users/nathanschiele/Zotero/storage/8VJANU3F/1201.html:text/html;Pawlik_Augsten_2011_RTED.pdf:/Users/nathanschiele/Zotero/storage/SUR58295/Pawlik_Augsten_2011_RTED.pdf:application/pdf},
}

@misc{akutsu_tree_2021,
	title = {Tree Edit Distance with Variables. Measuring the Similarity between Mathematical Formulas},
	url = {http://arxiv.org/abs/2105.04802},
	abstract = {In this article, we propose tree edit distance with variables, which is an extension of the tree edit distance to handle trees with variables and has a potential application to measuring the similarity between mathematical formulas, especially, those appearing in mathematical models of biological systems. We analyze the computational complexities of several variants of this new model. In particular, we show that the problem is {NP}-complete for ordered trees. We also show for unordered trees that the problem of deciding whether or not the distance is 0 is graph isomorphism complete but can be solved in polynomial time if the maximum outdegree of input trees is bounded by a constant. This distance model is then extended for measuring the diÔ¨Äerence/similarity between two systems of diÔ¨Äerential equations, for which results of preliminary computational experiments using biological models are provided.},
	number = {{arXiv}:2105.04802},
	publisher = {{arXiv}},
	author = {Akutsu, Tatsuya and Mori, Tomoya and Nakamura, Naotoshi and Kozawa, Satoshi and Ueno, Yuhei and Sato, Thomas N.},
	urldate = {2024-02-14},
	date = {2021-05-11},
	langid = {english},
	eprinttype = {arxiv},
	eprint = {2105.04802 [cs]},
	keywords = {Computer Science - Data Structures and Algorithms},
	file = {Akutsu et al. - 2021 - Tree Edit Distance with Variables. Measuring the S.pdf:/Users/nathanschiele/Zotero/storage/9YL67NZ5/Akutsu et al. - 2021 - Tree Edit Distance with Variables. Measuring the S.pdf:application/pdf},
}

@inproceedings{sidorov_computing_2015,
	location = {Redmond, {WA}, {USA}},
	title = {Computing text similarity using Tree Edit Distance},
	isbn = {978-1-4673-7248-0},
	url = {http://ieeexplore.ieee.org/document/7284129/},
	doi = {10.1109/NAFIPS-WConSC.2015.7284129},
	abstract = {In this paper, we propose the application of the Tree Edit Distance ({TED}) for calculation of similarity between syntactic n-grams for further detection of soft similarity between texts. The computation of text similarity is the basic task for many natural language processing problems, and it is an open research Ô¨Åeld. Syntactic n-grams are text features for Vector Space Model construction extracted from dependency trees. Soft similarity is application of Vector Space Model taking into account similarity of features. First, we discuss the advantages of the application of the {TED} to syntactic n-grams. Then, we present a procedure based on the {TED} and syntactic n-grams for calculating soft similarity between texts.},
	eventtitle = {2015 Annual Conference of the North American Fuzzy Information Processing Society ({NAFIPS}) held jointly with 2015 5th World Conference on Soft Computing ({WConSC})},
	pages = {1--4},
	booktitle = {2015 Annual Conference of the North American Fuzzy Information Processing Society ({NAFIPS}) held jointly with 2015 5th World Conference on Soft Computing ({WConSC})},
	publisher = {{IEEE}},
	author = {Sidorov, Grigori and Gomez-Adorno, Helena and Markov, Ilia and Pinto, David and Loya, Nahun},
	urldate = {2024-02-14},
	date = {2015-08},
	langid = {english},
	file = {Sidorov et al. - 2015 - Computing text similarity using Tree Edit Distance.pdf:/Users/nathanschiele/Zotero/storage/BUJSBHWC/Sidorov et al. - 2015 - Computing text similarity using Tree Edit Distance.pdf:application/pdf},
}

@article{zhang_simple_1989,
	title = {Simple Fast Algorithms for the Editing Distance Between Trees and Related Problems},
	volume = {18},
	doi = {10.1137/0218082},
	abstract = {Ordered labeled trees are trees in which the left-to-right order among siblings is significant. The distance between two ordered trees is considered to be the weighted number of edit operations (insert, delete, and modify) to transform one tree to another. The problem of approximate tree matching is also considered. Specifically, algorithms are designed to answer the following kinds of questions: 1. What is the distance between two trees? 2. What is the minimum distance between T 1 and T 2 when zero or more subtrees can be removed from T 2 ? 3. Let the pruning of a tree at node n mean removing all the descendants of node n. The analogous question for prunings as for subtrees is answered. A dynamic programming algorithm is presented to solve the three questions in sequential time O({\textbar}T 1 {\textbar}√ó{\textbar}T 2 {\textbar}√ómin(depth(T 1 ),leaves(T 1 ))√ómin(depth(T 2 ),leaves(T 2 ))) and space O({\textbar}T 1 {\textbar}√ó{\textbar}T 2 {\textbar}) compared with O({\textbar}T 1 {\textbar}√ó{\textbar}T 2 {\textbar}√ó(depth(T 1 )) 2 √ó(depth(T 2 )) 2 ) for the best previous published algorithm due to Tai [J. Assoc. Comput. Mach. 26, 422-433 (1979; Zbl 0409.68040)]. Further, the algorithm presented here can be parallelized to give time O({\textbar}T 1 {\textbar}+{\textbar}T 2 {\textbar}).},
	pages = {1245--1262},
	journaltitle = {{SIAM} J. Comput.},
	shortjournal = {{SIAM} J. Comput.},
	author = {Zhang, Kaizhong and Shasha, Dennis},
	date = {1989-12-01},
	file = {Zhang_Shasha_1989_Simple Fast Algorithms for the Editing Distance Between Trees and Related.pdf:/Users/nathanschiele/Zotero/storage/RA3LE379/Zhang_Shasha_1989_Simple Fast Algorithms for the Editing Distance Between Trees and Related.pdf:application/pdf},
}

@article{tai_tree--tree_nodate,
	title = {The Tree-to-Tree Correction Problem},
	journaltitle = {The Tree},
	author = {Tai, Kuo-Chung},
	langid = {english},
	file = {Tai - The Tree-to-Tree Correction Problem.pdf:/Users/nathanschiele/Zotero/storage/UH7VMQIV/Tai - The Tree-to-Tree Correction Problem.pdf:application/pdf},
}


@article{zhang_editing_1992,
	title = {On the editing distance between unordered labeled trees},
	volume = {42},
	issn = {00200190},
	url = {https://linkinghub.elsevier.com/retrieve/pii/002001909290136J},
	doi = {10.1016/0020-0190(92)90136-J},
	abstract = {This paper considers the problem of computing the editing distance between unordered, labeled trees. We give eÔ¨Écient polynomial-time algorithms for the case when one tree is a string or has a bounded number of leaves. By contrast, we show that the problem is N P -complete even for binary trees having a label alphabet of size two.},
	pages = {133--139},
	number = {3},
	journaltitle = {Information Processing Letters},
	shortjournal = {Information Processing Letters},
	author = {Zhang, Kaizhong and Statman, Rick and Shasha, Dennis},
	urldate = {2024-02-14},
	date = {1992-05},
	langid = {english},
	file = {Zhang et al. - 1992 - On the editing distance between unordered labeled .pdf:/Users/nathanschiele/Zotero/storage/GPS7PKHT/Zhang et al. - 1992 - On the editing distance between unordered labeled .pdf:application/pdf},
}


@inproceedings{jhawar_attack_2015,
	location = {Cham},
	title = {Attack Trees with Sequential Conjunction},
	isbn = {978-3-319-18467-8},
	doi = {10.1007/978-3-319-18467-8_23},
	series = {{IFIP} Advances in Information and Communication Technology},
	abstract = {We provide the first formal foundation of {SAND} attack trees which are a popular extension of the well-known attack trees. The {SAND} attack tree formalism increases the expressivity of attack trees by introducing the sequential conjunctive operator ùöÇùô∞ùôΩùô≥{SAND}\{{\textbackslash}mathtt \{{SAND}\}\}. This operator enables the modeling of ordered events.We give a semantics to {SAND} attack trees by interpreting them as sets of series-parallel graphs and propose a complete axiomatization of this semantics. We define normal forms for {SAND} attack trees and a term rewriting system which allows identification of semantically equivalent trees. Finally, we formalize how to quantitatively analyze {SAND} attack trees using attributes.},
	pages = {339--353},
	booktitle = {{ICT} Systems Security and Privacy Protection},
	publisher = {Springer International Publishing},
	author = {Jhawar, Ravi and Kordy, Barbara and Mauw, Sjouke and Radomiroviƒá, Sa≈°a and Trujillo-Rasua, Rolando},
	editor = {Federrath, Hannes and Gollmann, Dieter},
	date = {2015},
	langid = {english},
	keywords = {Attack trees, {SAND}, Security modeling, Sequential operators},
	file = {Jhawar et al_2015_Attack Trees with Sequential Conjunction.pdf:/Users/nathanschiele/Zotero/storage/KR43BAQW/Jhawar et al_2015_Attack Trees with Sequential Conjunction.pdf:application/pdf},
}

@inproceedings{mauw_foundations_2006,
	location = {Berlin, Heidelberg},
	title = {Foundations of Attack Trees},
	isbn = {978-3-540-33355-5},
	doi = {10.1007/11734727_17},
	series = {Lecture Notes in Computer Science},
	abstract = {Attack trees have found their way to practice because they have proved to be an intuitive aid in threat analysis. Despite, or perhaps thanks to, their apparent simplicity, they have not yet been provided with an unambiguous semantics. We argue that such a formal interpretation is indispensable to precisely understand how attack trees can be manipulated during construction and analysis. We provide a denotational semantics, based on a mapping to attack suites, which abstracts from the internal structure of an attack tree, we study transformations between attack trees, and we study the attribution and projection of an attack tree.},
	pages = {186--198},
	booktitle = {Information Security and Cryptology - {ICISC} 2005},
	publisher = {Springer},
	author = {Mauw, Sjouke and Oostdijk, Martijn},
	editor = {Won, Dong Ho and Kim, Seungjoo},
	date = {2006},
	langid = {english},
	keywords = {attack trees, semantics, threat analysis},
	file = {Mauw_Oostdijk_2006_Foundations of Attack Trees.pdf:/Users/nathanschiele/Zotero/storage/2ULZYG5K/Mauw_Oostdijk_2006_Foundations of Attack Trees.pdf:application/pdf},
}

@article{kordy_attack-defense_2014,
	title = {Attack-defense trees},
	volume = {24},
	issn = {0955-792X, 1465-363X},
	url = {https://academic.oup.com/logcom/article-lookup/doi/10.1093/logcom/exs029},
	doi = {10.1093/logcom/exs029},
	abstract = {Attack‚Äìdefense trees are a novel methodology for graphical security modelling and assessment. They extend the well- known formalism of attack trees by allowing nodes that represent defensive measures to appear at any level of the tree. This enlarges the modelling capabilities of attack trees and makes the new formalism suitable for representing interactions between an attacker and a defender. Our formalization supports different semantical approaches for which we provide usage scenarios. We also formalize how to quantitatively analyse attack and defense scenarios using attributes.},
	pages = {55--87},
	number = {1},
	journaltitle = {Journal of Logic and Computation},
	shortjournal = {Journal of Logic and Computation},
	author = {Kordy, B. and Mauw, S. and Radomirovic, S. and Schweitzer, P.},
	urldate = {2022-02-16},
	date = {2014-02-01},
	langid = {english},
	file = {Kordy et al. - 2014 - Attack-defense trees.pdf:/Users/nathanschiele/Zotero/storage/8EB6LE7E/Kordy et al. - 2014 - Attack-defense trees.pdf:application/pdf},
}

@inproceedings{kordy_adtool_2013,
	location = {Berlin, Heidelberg},
	title = {{ADTool}: Security Analysis with Attack‚ÄìDefense Trees},
	isbn = {978-3-642-40196-1},
	doi = {10.1007/978-3-642-40196-1_15},
	series = {Lecture Notes in Computer Science},
	shorttitle = {{ADTool}},
	abstract = {{ADTool} is free, open source software assisting graphical modeling and quantitative analysis of security, using attack‚Äìdefense trees. The main features of {ADTool} are easy creation, efficient editing, and automated bottom-up evaluation of security-relevant measures. The tool also supports the usage of attack trees, protection trees and defense trees, which are all particular instances of attack‚Äìdefense trees.},
	pages = {173--176},
	booktitle = {Quantitative Evaluation of Systems},
	publisher = {Springer},
	author = {Kordy, Barbara and Kordy, Piotr and Mauw, Sjouke and Schweitzer, Patrick},
	editor = {Joshi, Kaustubh and Siegle, Markus and Stoelinga, Mari√´lle and D‚ÄôArgenio, Pedro R.},
	date = {2013},
	langid = {english},
	keywords = {Attack Tree, Attribute Domain, Defense Tree, Domain Class, Security Analysis},
	file = {Kordy et al. - 2013 - ADTool Security Analysis with Attack‚ÄìDefense Tree.pdf:/Users/nathanschiele/Zotero/storage/DCUX8897/Kordy et al. - 2013 - ADTool Security Analysis with Attack‚ÄìDefense Tree.pdf:application/pdf},
}



@inproceedings{gadyatskayaRefinementAwareGenerationAttack2017,
  address   = {Cham},
  series    = {Lecture {Notes} in {Computer} {Science}},
  title     = {Refinement-{Aware} {Generation} of {Attack} {Trees}},
  isbn      = {978-3-319-68063-7},
  doi       = {10.1007/978-3-319-68063-7_11},
  abstract  = {Attack trees allow a security analyst to obtain an overview of the potential vulnerabilities of a system. Due to their refinement structure, attack trees support the analyst in understanding the system vulnerabilities at various levels of abstraction. However, contrary to manually synthesized attack trees, automatically generated attack trees are often not refinement-aware, making subsequent human processing much harder. The generation of attack trees in which the refined nodes correspond to semantically relevant levels of abstraction is still an open question. In this paper, we formulate the attack-tree generation problem and propose a methodology to, given a system model, generate attack trees with meaningful levels of abstraction.},
  language  = {en},
  booktitle = {Security and {Trust} {Management}},
  publisher = {Springer International Publishing},
  author    = {Gadyatskaya, Olga and Jhawar, Ravi and Mauw, Sjouke and Trujillo-Rasua, Rolando and Willemse, Tim A. C.},
  editor    = {Livraga, Giovanni and Mitchell, Chris},
  year      = {2017},
  pages     = {164--179},
  annote    = {Extracted Annotations (4/19/2021, 5:47:01 PM)"Automatic generation of attack trees can be interpreted as model transformation." (Gadyatskaya et al 2017:164)"This reasoning is applied recursively to traverse complete attack paths." (Gadyatskaya et al 2017:165)"In fact, [VNN14] does not provide any meaning to intermediate nodes, which only serve to express how child nodes are combined, while [IPHK15, Gad15, HKT13] have intermediate nodes at the same level of abstraction as child nodes, representing actions in the system model." (Gadyatskaya et al 2017:165)Debate on whether intermediate nodes should carry meaning or not (note on p.165)"Automatic generation approaches work with concrete attacks, while manual creation of attack trees focuses on the refinement of goals into subgoals." (Gadyatskaya et al 2017:165)"Our approach utilizes a heuristic for encoding and decomposing attack traces that is based on the edge biclique problem [Pee03]." (Gadyatskaya et al 2017:166)"an attack tree defines how higher (parent) nodes are interpreted through lower (child) nodes." (Gadyatskaya et al 2017:166)"::= {\textbar} OR( t) {\textbar} AND( t) {\textbar} SAND( t). t b b t, . . . , b t, . . . , b t, . . . ," (Gadyatskaya et al 2017:166)"An expression like SAND( tn) b t1, . . . , denotes an attack tree of which the top node is labelled with action b, and which has children that have to be executed sequentially. n t1, . . . , tn" (Gadyatskaya et al 2017:166)"We define the auxiliary function to obtain the action at the root node as top follows (for SAND\vphantom{\{}\}): Œî OR,AND, top(b) = top( Œî( t)) = b. b t, . . . ," (Gadyatskaya et al 2017:167)" We say that is a subtree of t, denoted ‚àà t, if = or = Œî( tn) t t t t t b, t1, . . . , and ‚àà for some ‚àà \{ 1, n\}, where ‚àà \{ SAND\}. t ti i . . . , Œî OR,AND," (Gadyatskaya et al 2017:167)"The transition from one level in an attack tree to the next level defines a refinement. More precisely, a refinement is an expression of the form Œî( bn), where ‚àà and ‚àà \{ SAND\vphantom{\{}\}. That b b1, . . . , b, b1, . . . , bn Œî OR,AND, B is to say, a refinement corresponds to a tree of depth one. It follows that the set of refinements, denoted R, is a subset of the set of attack trees . In SAND particular, the refinement of the root node of an attack tree is determined by the partial function ref : R, defined by SAND ref ( Œî( tn)) = Œî(top( t1), top( tn)). b t1, . . . , b . . . , This is a partial function, since the refinement of an attack tree that consists of a single node is not defined. This function can be generalized to non-root nodes, allowing us to determine the set of all refinements that occur in an attack tree. Therefore, we define the function refs : P(R), as follows: T SAND refs(t) = ref (t ) {\textbar} ‚àà ‚àß ¬¨‚àÉb ‚àà B : = b\}. t t t" (Gadyatskaya et al 2017:168)"A refinement specification specifies which refinements should be satisfied by an attack tree. A refinement specification is simply defined as a set of refinements. Given an attack tree and a refinement specification ‚äÜ R, we use t œÅ t œÅ SAND to denote that satisfies œÅ. We define satisfaction by ‚áê‚áí refs(t) ‚äÜ œÅ. t t œÅ That is, a tree satisfies a refinement specification, if all refined actions in the tree also occur as refined actions in the specification." (Gadyatskaya et al 2017:169)},
  file      = {Gadyatskaya et al_2017_Refinement-Aware Generation of Attack Trees.pdf:/Users/nschiele/Zotero/storage/78I8M85T/Gadyatskaya et al_2017_Refinement-Aware Generation of Attack Trees.pdf:application/pdf}
}


@article{naikEvaluationPotentialAttack2022,
  title    = {An evaluation of potential attack surfaces based on attack tree modelling and risk matrix applied to self-sovereign identity},
  volume   = {120},
  issn     = {0167-4048},
  url      = {https://www.sciencedirect.com/science/article/pii/S0167404822002024},
  doi      = {10.1016/j.cose.2022.102808},
  abstract = {Self-Sovereign Identity (SSI) empowers users to govern their digital identity and personal data. This approach has changed the identity paradigm where users become the central governor of their identity; hence the rapid growth of the SSI model. Utilizing the security and privacy properties of blockchain, together with other security technologies, SSI purports to provide a robust security and privacy service. However, this governing power for users comes with a greater accountability and security risk, as not all users are capable or trained in its use and therefore in its efficient application. This trade-off requires a systematic evaluation of potential attacks on the SSI system and their security risks. Hitherto, there have been no noteworthy research studies performed to evaluate potential attacks on the SSI system and their security risks. This paper proposes an easy, efficient and economical approach to perform an evaluation of potential attacks on the SSI system and their security risks. This approach utilises a combination of an attack tree model and risk matrix model to perform this evaluation of potential attacks and their security risks, in addition to outlining a systematic approach including describing the system architecture and determining its assets in order to perform this evaluation of potential attacks and their security risks. This evaluation work has identified three potential attacks on the SSI system: faking identity, identity theft and distributed denial of service attacks, and performed their security risk evaluation utilising the proposed approach. Finally, this paper has proposed several mitigation strategies for the three evaluated attacks on the SSI system. This proposed evaluation approach is a systematic and generalised approach for evaluating attacks and their security risks, and can be applied to any other IT system.},
  urldate  = {2024-02-29},
  journal  = {Computers \& Security},
  author   = {Naik, Nitin and Grace, Paul and Jenkins, Paul and Naik, Kshirasagar and Song, Jingping},
  month    = sep,
  year     = {2022},
  keywords = {Attack tree model, Blockchain, Decentralized IDentifier, Diamond model of intrusion analysis, DID, Digital identity, Distributed denial of service, Distributed ledger technology, Faking identity, Identity management system, Identity theft, Lockheed Martin‚Äôs cyber kill chain, MITRE ATT\&CK framework, Risk matrix model, Self-sovereign identity, SSI, Verifiable credential},
  pages    = {102808}
}


@mastersthesis{mohalaiaImplementingUserInterface2023,
  title    = {Implementing a {User} {Interface} for {Attack}-{Defense} {Tree} {WebApp} {Using} {Human}-{Computer} {Interaction} {Principles}},
  url      = {https://theses.liacs.nl/2644},
  abstract = {A thesis written by Mohalaia, M. (Marwa) at Leiden University (LIACS).},
  language = {en},
  type     = {Bachelor's Thesis},
  urldate  = {2024-02-29},
  school   = {LIACS, Leiden University},
  author   = {Mohalaia, M. (Marwa)},
  year     = {2023},
  file     = {Full Text PDF:/Users/nschiele/Zotero/storage/3Z5WBE7H/Mohalaia - 2023 - Implementing a User Interface for Attack-Defense T.pdf:application/pdf;Mohalaia_2023_Implementing a User Interface for Attack-Defense Tree WebApp Using.pdf:/Users/nschiele/Zotero/storage/X98HEL38/Mohalaia_2023_Implementing a User Interface for Attack-Defense Tree WebApp Using.pdf:application/pdf}
}

@mastersthesis{mezaADTLangDeclarativeLanguage2023,
  title      = {{ADTLang}: {A} {Declarative} {Language} to {Describe} {Attack} {Defense} {Trees}},
  shorttitle = {{ADTLang}},
  url        = {https://theses.liacs.nl/2669},
  abstract   = {A thesis written by Meza Orellana, S.G. (Stephan) at Leiden University (LIACS).},
  type       = {Bachelor's Thesis},
  language   = {en},
  urldate    = {2024-02-29},
  school     = {LIACS, Leiden University},
  author     = {Meza, Stephan Orellana},
  year       = {2023},
  file       = {S.G. (Stephan)_2023_ADTLang.pdf:/Users/nschiele/Zotero/storage/PPR49VRC/S.G. (Stephan)_2023_ADTLang.pdf:application/pdf}
}



@article{karpatiComparingAttackTrees2014,
  title    = {Comparing attack trees and misuse cases in an industrial setting},
  volume   = {56},
  issn     = {09505849},
  url      = {https://linkinghub.elsevier.com/retrieve/pii/S0950584913001924},
  doi      = {10.1016/j.infsof.2013.10.004},
  abstract = {The last decade has seen an increasing focus on addressing security already during the earliest stages of system development, such as requirements determination. Attack trees and misuse cases are established techniques for representing security threats along with their potential mitigations. Previous work has compared attack trees and misuse cases in two experiments with students. The present paper instead presents an experiment where industrial practitioners perform the experimental tasks in their workplace. The industrial experiment conÔ¨Årms a central Ô¨Ånding from the student experiments: that attack trees tend to help identifying more threats than misuse cases. It also presents a new result: that misuse cases tend to encourage identiÔ¨Åcation of threats associated with earlier development stages than attack trees. The two techniques should therefore be considered complementary and should be used together in practical requirements work.},
  language = {en},
  number   = {3},
  urldate  = {2023-08-25},
  journal  = {Information and Software Technology},
  author   = {Karpati, Peter and Redda, Yonathan and Opdahl, Andreas L. and Sindre, Guttorm},
  month    = mar,
  year     = {2014},
  pages    = {294--308},
  file     = {Karpati et al. - 2014 - Comparing attack trees and misuse cases in an indu.pdf:/Users/nschiele/Zotero/storage/PD76AJB6/Karpati et al. - 2014 - Comparing attack trees and misuse cases in an indu.pdf:application/pdf}
}

@inproceedings{naiakshinaConductingSecurityDeveloper2020,
  address    = {New York, NY, USA},
  series     = {{CHI} '20},
  title      = {On {Conducting} {Security} {Developer} {Studies} with {CS} {Students}: {Examining} a {Password}-{Storage} {Study} with {CS} {Students}, {Freelancers}, and {Company} {Developers}},
  isbn       = {978-1-4503-6708-0},
  shorttitle = {On {Conducting} {Security} {Developer} {Studies} with {CS} {Students}},
  url        = {https://dl.acm.org/doi/10.1145/3313831.3376791},
  doi        = {10.1145/3313831.3376791},
  abstract   = {Ecological validity is a major concern in usable security studies with developers. Many studies are conducted with computer science (CS) students out of convenience, since recruiting professional software developers in sufficient numbers is very challenging. In a password-storage study, Naiakshina et al. (CHI'19) showed that CS students behave similarly to freelance developers recruited online. While this is a promising result for conducting developer studies with students, an open question remains: Do professional developers employed in companies behave similarly as well? To provide more insight into the ecological validity of recruiting students for security developer studies, we replicated the study of Naiakshina et al. with developers from diverse companies in Germany. We found that developers employed in companies performed better than students and freelancers in a direct comparison. However, treatment effects were found to be significant in all groups; the treatment effects on CS students also held for company developers.},
  urldate    = {2024-02-05},
  booktitle  = {Proceedings of the 2020 {CHI} {Conference} on {Human} {Factors} in {Computing} {Systems}},
  publisher  = {Association for Computing Machinery},
  author     = {Naiakshina, Alena and Danilova, Anastasia and Gerlitz, Eva and Smith, Matthew},
  month      = apr,
  year       = {2020},
  keywords   = {developer password study, security developer study, student developer, usable security and privacy},
  pages      = {1--13},
  file       = {Naiakshina et al_2020_On Conducting Security Developer Studies with CS Students.pdf:/Users/nschiele/Zotero/storage/DYCHYDUC/Naiakshina et al_2020_On Conducting Security Developer Studies with CS Students.pdf:application/pdf}
}


@misc{hendersonZssTreeEdit,
  title      = {zss: {Tree} edit distance using the {Zhang} {Shasha} algorithm},
  copyright  = {UNKNOWN},
  shorttitle = {zss},
  url        = {https://www.github.com/timtadh/zss},
  urldate    = {2024-02-29},
  author     = {Henderson, Tim},
  file       = {Snapshot:/Users/nschiele/Zotero/storage/LP6AAFPX/1.1.4.html:text/html}
}
